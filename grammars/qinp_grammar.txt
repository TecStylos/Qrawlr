# ---------------- GLOBAL ----------------

GlobalCode:
    GlobalCodeLine ( Newline_ GlobalCodeLine )*

GlobalCodeLine(hidden):
    GlobalStatement? SingleLineComment?

GlobalStatement(hidden):
    Pass
    Import
    SpaceDefinition

# ---------------- IDENTIFIER ----------------

Identifier(fuse):
    IdentifierFirstChar IdentifierChar*

IdentifierFirstChar(hidden):
    [ 'az' 'AZ' "_" ]

IdentifierChar(hidden):
    [IdentifierFirstChar '09' ]

# ---------------- IMPORT ----------------

Import:
    "import"_ ImportModifiers Whitespace_ StringLiteral

ImportModifiers:
    ( "."_ Identifier)*

# ---------------- SPACE ----------------

SpaceDefinition:
    "space"_ Whitespace_ Identifier ":"_ Whitespace?_ Newline_ SpaceBody

SpaceBody:
    IndentationIncrease_ SpaceBodyLine ( Newline_ [ ( IndentationCurrent_ SpaceBodyLine ) SingleLineComment ] )* IndentationDecrease_

SpaceBodyLine(hidden):
    SpaceStatement? SingleLineComment?

SpaceStatement(hidden):
    Pass
    SpaceDefinition

# ---------------- WHITESPACE ----------------

Whitespace:
    WhitespaceChar+

WhitespaceChar:
    [ " " "\t"]

Newline:
    "\n"

# ---------------- LITERALS ----------------

StringLiteral:
    "\"" StringChar* "\""

StringChar:
    [ "\\\\" "\\\"" "\""! ]

# ---------------- VERBOSE ----------------

Pass:
    "pass"_
Break:
    "break"_
Continue:
    "continue"_
#Return:
#    "return"_ Expression?

# ---------------- INDENTATION ----------------

IndentationCurrent:
    :IndentationStack.0:

IndentationIncrease:
    ( IndentationCurrent Whitespace ){ push IndentationStack }

IndentationDecrease:
    ""{ pop IndentationStack }

# ---------------- COMMENTS ----------------
SingleLineComment(fuse):
    Whitespace?_ "\\\\" "\n"!*