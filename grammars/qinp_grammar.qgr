\\ ---------------- GLOBAL CODE ----------------

GlobalCode:
    (
        GlobalCodeItem
        (
            "\n"_
            GlobalCodeItem
        )*
    )

GlobalCodeItem(hidden):
    SpaceBodyItem
    StatementImport
    NonCodeBlock

\\ ---------------- PASS ----------------

StatementPass:
    "pass"_

\\ ---------------- IMPORT ----------------

StatementImport:
    (
        "import"_
        ImportSpecifiers
        Whitespace_
        String{ onFail: fail("Expected import path") }
    )

ImportSpecifiers:
    (
        "."_
        ImportSpecifier{ onFail: fail("Expected import specifier") }
    )*

ImportSpecifier(hidden):
    "linux"
    "windows"
    "macos"
    "defer"

\\ ---------------- SPACE ----------------

StatementSpace:
    SpaceHeader SpaceBody

SpaceHeader:
    (
        "space"_
        Whitespace_
        SpaceName{ onFail: fail("Expected space name") }
        Whitespace?_
        ":"_{ onFail: fail("Expected colon") }
    )

SpaceName:
    Identifier

SpaceBody:
    Whitespace?_ SpaceBodyItem
    (
        NonCodeBlock?
        "\n"_ IndentationIncrease_{ onFail: fail("Expected indentation increase") }
        SpaceBodyItem{ onFail: fail("Expected at least one space body item") }
        (
            NonCodeBlock?
            "\n"_ Indentation_
            SpaceBodyItem{ onFail: fail("Expected space body item after correct indentation")}
        )*
        IndentationDecrease_
    )

SpaceBodyItem(hidden):
    StatementPass
    StatementSpace
    StatementFunctionDeclDef

\\ ---------------- FUNCTIONS ----------------

StatementFunctionDeclDef:
    (
        "fn"_ Whitespace?_
        FunctionReturnType
        Whitespace?_
        FunctionName{ onFail: fail("Expected function name") }
        FunctionParameters
        Whitespace?_
        FunctionSpecifiers
        Whitespace?_
        [
            "..."_->Declaration
        ]
    )

FunctionName:
    Identifier

FunctionReturnType:
    (
        "<"_ Whitespace?_
        Datatype?
        Whitespace?_ ">"_{ onFail: fail("Expected closing angle bracket") }
    )

FunctionParameters:
    (
        "("_ Whitespace?_
        (
            FunctionParameter
            (
                Whitespace?_ ","_
                Whitespace?_
                FunctionParameter{ onFail: fail("Expected function parameter after comma") }
            )*
        )?
        Whitespace?_ ")"_{ onFail: fail("Expected closing parenthesis") }
    )

FunctionParameter:
    ( Datatype Whitespace?_ Identifier{ onFail: fail("Expected function parameter name") } )->Normal

FunctionSpecifiers:
    ( FunctionSpecifier ( Whitespace?_ FunctionSpecifier )* )?

FunctionSpecifier:
    "!"_->RequiresPredeclaration
    "nodiscard"_->NoDiscard

\\ ---------------- DATATYPES ----------------

Datatype:
    Identifier->Named
    ( "?"_ Identifier{ onFail: fail("Expected function blueprint parameter name") } )->Blueprint

\\ ---------------- INDENTATION ----------------

Indentation:
    :IndentationStack.0:

IndentationIncrease:
    ( Indentation Whitespace ){ onMatch: push(_, IndentationStack) }

IndentationDecrease:
    ""_{ onMatch: pop(IndentationStack) }

\\ ---------------- COMMENTS ----------------

Comment:
    Whitespace?_ [ CommentSingleLine CommentMultiLine ]

CommentSingleLine(hidden fuse):
    "\\\\" Newline!*

CommentMultiLine(hidden fuse):
    "\\*" "*\\"!* "*\\"

\\ ---------------- STRINGS ----------------

String(fuse):
    (
        "\""_
        StringChar*
        "\""_{ onFail: fail("Expected closing quote") }
    )

StringChar(hidden):
    EscapeSequence
    "\""!

\\ ---------------- IDENTIFIERS ----------------

Identifier(fuse):
    [ AlphaChar "_" ] [ AlnumChar "_" ]*

\\ ---------------- MISCELLANEOUS ----------------

NonCodeBlock(hidden):
    (
        [ EmptyLine_ Comment ]
        (
            "\n"_
            [ EmptyLine_ Comment ]
        )*
    )
    

EmptyLine:
    Whitespace?_ Newline~_

EscapeSequence(fuse):
    (
        "\\"_
        [
            "a" "b" "e" "f" "n" "r" "t" "v" "\\" "'" "\""
            (
                "x" (HexChar HexChar){ onFail: fail("Expected hexadecimal escape sequence") }
            )
        ]{ onFail: fail("Expected escape sequence") }
    )

AlphaChar(hidden): [ 'az' 'AZ' ]
AlnumChar(hidden): [ AlphaChar DecChar ]

BinChar(hidden): '01'
OctChar(hidden): '07'
DecChar(hidden): '09'
HexChar(hidden): [ '09' 'af' 'AF' ]

Newline: "\n"
Whitespace(fuse): [ " " "\t" ]+