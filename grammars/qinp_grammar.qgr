\\ ---------------- GLOBAL CODE ----------------

GlobalCode:
    (
        ( NonCodeBlock "\n" )?
        CodeItem
        (
            NonCodeBlock?
            "\n"_
            CodeItem
        )*
    )

CodeItem(hidden):
    StatementPass
    StatementDefer
    StatementImport
    StatementSpace
    StatementReturn
    StatementDefine
    StatementWhile
    StatementDoWhile
    StatementIfElifElse
    StatementPackDeclDef
    StatementEnumDeclDef
    StatementFunctionDeclDef
    StatementVariableDeclDef
    StatementInlineAssembly
    Expression

CodeBlock:
    Whitespace?_ CodeItem
    (
        NonCodeBlock?
        "\n"_ IndentationIncrease_{ onFail: fail("Expected indentation increase") }
        CodeItem{ onFail: fail("Expected at least one body item") }
        (
            NonCodeBlock?
            "\n"_ Indentation_
            CodeItem{ onFail: fail("Expected body item after correct indentation")}
        )*
        IndentationDecrease_
    )

\\ ---------------- PASS ----------------

StatementPass:
    "pass"_

\\ ---------------- DEFER ----------------

StatementDefer:
    "defer"_

\\ ---------------- IMPORT ----------------

StatementImport:
    (
        "import"_
        ImportSpecifiers
        Whitespace_
        LiteralString{ onFail: fail("Expected import path") }
    )

ImportSpecifiers:
    (
        "."_
        ImportSpecifier{ onFail: fail("Expected import specifier") }
    )*

ImportSpecifier(hidden):
    "linux"
    "windows"
    "macos"
    "defer"

\\ ---------------- SPACE ----------------

StatementSpace:
    SpaceHeader CodeBlock

SpaceHeader:
    (
        "space"_
        Whitespace_
        SpaceName{ onFail: fail("Expected space name") }
        Whitespace?_
        ":"_{ onFail: fail("Expected colon") }
    )

SpaceName:
    Identifier

\\ ---------------- RETURN ----------------

StatementReturn:
    "return"_ Whitespace?_ Expression

\\ ---------------- DEFINE ----------------

StatementDefine:
    (
        "define"_ Whitespace_
        Identifier{ onFail: fail("Expected macro name") }
        MacroParameters
        Whitespace?_
        CodeItem{ onFail: fail("Expected macro body") }
    )

MacroParameters:
    (
        Whitespace?_ "("_
        (
            Whitespace?_
            Identifier{ onFail: fail("Expected macro parameter name") }
            (
                Whitespace?_ ","_
                Whitespace?_
                Identifier{ onFail: fail("Expected macro parameter after comma") }
            )*
        )
        Whitespace?_ ")"_{ onFail: fail("Expected closing parenthesis for macro parameter list") }
    )
    ""_

\\ ---------------- WHILE ----------------

StatementWhile:
    (
        "while"_
        Whitespace?_
        Expression{ onFail: fail("Expected condition for while loop") }
        Whitespace?_ ":"_{ onFail: fail("Expected colon") }
        CodeBlock
    )

\\ ---------------- DO WHILE ----------------

StatementDoWhile:
    (
        "do"_
        Whitespace?_ ":"_{ onFail: fail("Expected colon") }
        CodeBlock
        Whitespace?_ "\n"_{ onFail: fail("Expected newline after do-while loop body") }
        Indentation_{ onFail: fail("Expected indentation") }
        "while"_
        Whitespace_
        Expression{ onFail: fail("Expected condition for do-while loop") }
    )

\\ ---------------- IF/ELIF/ELSE ----------------

StatementIfElifElse:
    (
        StatementIf
        (
            "\n"_ Indentation_
            StatementElif
        )*
        (
            "\n"_ Indentation_
            StatementElse
        )?
    
    )

StatementIf:
    (
        "if"_
        Whitespace?_
        Expression{ onFail: fail("Expected condition for if statement") }
        Whitespace?_ ":"_{ onFail: fail("Expected colon") }
        CodeBlock
    )

StatementElif:
    (
        "elif"_
        Whitespace?_
        Expression{ onFail: fail("Expected condition for elif statement") }
        Whitespace?_ ":"_{ onFail: fail("Expected colon") }
        CodeBlock
    )

StatementElse:
    (
        "else"_
        Whitespace?_ ":"_{ onFail: fail("Expected colon") }
        CodeBlock
    )

\\ ---------------- PACKS ----------------

StatementPackDeclDef:
    PackHeader [ PackDeclaration PackDefinition ]

PackHeader:
    (
        "pack"_ Whitespace_
        PackName{ onFail: fail("Expected pack name") }
    )

PackName:
    SymbolReference

PackDeclaration:
    Whitespace?_ "..."_

PackDefinition:
    Whitespace?_ ":"_ CodeBlock{ onFail: fail("Expected pack body")}

\\ ---------------- ENUMS ----------------

StatementEnumDeclDef:
    EnumHeader [ EnumDeclaration EnumDefinition ]

EnumHeader:
    (
        "enum"_ Whitespace_
        EnumName{ onFail: fail("Expected enum name") }
    )

EnumName:
    SymbolReference

EnumDeclaration:
    Whitespace?_ "..."_

EnumDefinition:
    Whitespace?_ ":"_ EnumMemberList{ onFail: fail("Expected enum body")}

EnumMemberList:
    Whitespace?_ EnumMemberLine
    (
        NonCodeBlock?
        "\n"_ IndentationIncrease_{ onFail: fail("Expected indentation increase") }
        EnumMemberLine{ onFail: fail("Expected at least one enum member") }
        (
            NonCodeBlock?
            "\n"_ Indentation_
            EnumMemberLine{ onFail: fail("Expected enum member after correct indentation")}
        )*
        IndentationDecrease_
    )

EnumMemberLine:
    (
        EnumMemberDefinition
        (
            Whitespace?_ ","_
            Whitespace?_
            EnumMemberDefinition
        )*
        (Whitespace?_ ","_)?
    )

EnumMemberDefinition:
    (
        Identifier
        Whitespace?_
        (
            "="_
            Whitespace?_
            Expression{ onFail: fail("Expected enum member value") }
        )?
    )

\\ ---------------- FUNCTIONS ----------------

StatementFunctionDeclDef:
    FunctionHeader [ FunctionDeclaration FunctionDefinition ]

FunctionHeader:
    (
        "fn"_ Whitespace?_
        FunctionReturnType
        Whitespace?_
        FunctionName{ onFail: fail("Expected function name") }
        FunctionParameters
        Whitespace?_
        FunctionSpecifiers
    )

FunctionName:
    SymbolReference

FunctionReturnType:
    (
        "<"_ Whitespace?_
        Datatype?
        Whitespace?_ ">"_{ onFail: fail("Expected closing angle bracket") }
    )
    ""_

FunctionParameters:
    (
        "("_ Whitespace?_
        (
            FunctionParameter
            (
                Whitespace?_ ","_
                Whitespace?_
                FunctionParameter{ onFail: fail("Expected function parameter after comma") }
            )*
        )?
        Whitespace?_ ")"_{ onFail: fail("Expected closing parenthesis") }
    )

FunctionParameter:
    ( Datatype Whitespace?_ Identifier{ onFail: fail("Expected function parameter name") } )->Normal
    "..."_->Variadic

FunctionSpecifiers:
    ( FunctionSpecifier ( Whitespace?_ FunctionSpecifier )* )?

FunctionSpecifier:
    "!"_->RequiresPredeclaration
    "nodiscard"_->NoDiscard

FunctionDeclaration:
    Whitespace?_ "..."_

FunctionDefinition:
    Whitespace?_ ":"_ CodeBlock{ onFail: fail("Expected function body")}

\\ ---------------- VARIABLES ----------------

StatementVariableDeclDef:
    VariableDeclarator VariableDatatype Whitespace?_ VariableName{ onFail: fail("Expected variable name") } VariableInitializer

VariableDeclarator:
    ("static" Whitespace_)? [ "var" "const" ]

VariableDatatype:
    (
        "<"_ Whitespace?_
        Datatype?
        Whitespace?_ ">"_{ onFail: fail("Expected closing angle bracket") }
    )
    ""_

VariableName:
    Identifier

VariableInitializer:
    (
        Whitespace?_
        "="_
        Whitespace?_
        Expression{ onFail: fail("Expected variable initializer value") }
    )?

\\ ---------------- INLINE ASSEMBLY ----------------

StatementInlineAssembly:
    InlineAsmHeader InlineAsmBody

InlineAsmHeader:
    (
        [ "asm" "assembly" ]_
        Whitespace?_ ":"_{ onFail: fail("Expected colon") }
    )

InlineAsmBody:
    Whitespace?_ LiteralString
    (
        NonCodeBlock?
        "\n"_ IndentationIncrease_{ onFail: fail("Expected indentation increase") }
        LiteralString{ onFail: fail("Expected at least one assembly line") }
        (
            NonCodeBlock?
            "\n"_ Indentation_
            LiteralString{ onFail: fail("Expected assembly line after correct indentation")}
        )*
        IndentationDecrease_
    )

\\ ---------------- DATATYPES ----------------

Datatype:
    (
        "?"_
        Identifier{ onFail: fail("Expected function blueprint parameter name") }
    )->Blueprint
    (
        Identifier
        Whitespace?_
        ("const"_->Const)?
        (
            Whitespace?_
            "*"_->Pointer
            Whitespace?_
        ("const"_->Const)?
        )*
        (
            Whitespace?_
            "["_ Whitespace?_
            (
                Expression{ onFail: fail("Expected array size") }
                Whitespace?_
                "]"_{ onFail: fail("Expected closing bracket") }
            )
            Whitespace?_
        )*
    )->Named

\\ ---------------- EXPRESSIONS ----------------

Expression:
    ExprPrec1

ExprPrec1:
    (
        ExprPrec2
        (
            Whitespace?_
            ExprPrec1Operator
            Whitespace?_
            ExprPrec2{ onFail: fail("Expected expression after operator [lvl-01]") }
        )*
    )

ExprPrec1Operator: [ "=" "+=" "-=" "*=" "/=" "%=" "&=" "|=" "^=" "<<=" ">>=" TernaryOperator ]

ExprPrec2Operator: [ "||" ]
ExprPrec2:
    (
        ExprPrec3
        (
            Whitespace?_
            ExprPrec2Operator
            Whitespace?_
            ExprPrec3{ onFail: fail("Expected expression after operator [lvl-02]") }
        )*
    )

TernaryOperator:
    (
        "?"_ Whitespace?_
        Expression{ onFail: fail("Expected option 'true' for ternary operator") }
        Whitespace?_ ":"_{ onFail: fail("Expected colon for ternary operator") }
    )

ExprPrec3Operator: [ "&&" ]
ExprPrec3:
    (
        ExprPrec4
        (
            Whitespace?_
            ExprPrec3Operator
            Whitespace?_
            ExprPrec4{ onFail: fail("Expected expression after operator [lvl-03]") }
        )*
    )

ExprPrec4Operator: [ ( "|" "|"!~_ ) ]
ExprPrec4:
    (
        ExprPrec5
        (
            Whitespace?_
            ExprPrec4Operator
            Whitespace?_
            ExprPrec5{ onFail: fail("Expected expression after operator [lvl-04]") }
        )*
    )

ExprPrec5Operator: [ "^" ]
ExprPrec5:
    (
        ExprPrec6
        (
            Whitespace?_
            ExprPrec5Operator
            Whitespace?_
            ExprPrec6{ onFail: fail("Expected expression after operato [lvl-05]") }
        )*
    )

ExprPrec6Operator: [ ( "&" "&"!~_ ) ]
ExprPrec6:
    (
        ExprPrec7
        (
            Whitespace?_
            ExprPrec6Operator
            Whitespace?_
            ExprPrec7{ onFail: fail("Expected expression after operator [lvl-06]") }
        )*
    )


ExprPrec7Operator: [ "==" "!=" ]
ExprPrec7:
    (
        ExprPrec8
        (
            Whitespace?_
            ExprPrec7Operator
            Whitespace?_
            ExprPrec8{ onFail: fail("Expected expression after operator [lvl-07]") }
        )*
    )

ExprPrec8Operator: [ "<=" "<" ">=" ">" ]
ExprPrec8:
    (
        ExprPrec9
        (
            Whitespace?_
            ExprPrec8Operator
            Whitespace?_
            ExprPrec9{ onFail: fail("Expected expression after operator [lvl-08]") }
        )*
    )

ExprPrec9Operator: ( [ "<<" ">>" ] "="!~_ )
ExprPrec9:
    (
        ExprPrec10
        (
            Whitespace?_
            ExprPrec9Operator
            Whitespace?_
            ExprPrec10{ onFail: fail("Expected expression after operator [lvl-09]") }
        )*
    )

ExprPrec10Operator: ( [ "+" "-" ] "="!~_ )
ExprPrec10:
    (
        ExprPrec11
        (
            Whitespace?_
            ExprPrec10Operator
            Whitespace?_
            ExprPrec11{ onFail: fail("Expected expression after operator [lvl-10]") }
        )*
    )

ExprPrec11Operator: ( [ "*" "/" "%" ] "="!~_ )
ExprPrec11:
    (
        ExprPrec12
        (
            Whitespace?_
            ExprPrec11Operator
            Whitespace?_
            ExprPrec12{ onFail: fail("Expected expression after operator [lvl-11]") }
        )*
    )

ExprPrec12Operator: [ "." "++" "--" "+" "-" "!" "~" "*" "&" "sizeof" ExprOpTypeCast ]
ExprPrec12:
    (
        (
            Whitespace?_
            ExprPrec12Operator
        )*
        ExprPrec13
    )

ExprOpTypeCast:
    (
        "("_ Whitespace?_
        Datatype
        Whitespace?_ ")"_
    )

ExprPrec13Operator:
    [
        "++" "--"
        ( [ "." "->" ] Identifier{ onFail: fail("Expected identifier after member access operator")} )
        ExprOpFunctionCall ExprOpSubscript
    ]
ExprPrec13:
    (
        ExprPrec14
        (
            Whitespace?_
            ExprPrec13Operator
        )*
    )

ExprOpFunctionCall:
    (
        "("_ Whitespace?_
        FunctionCallBlueprintParameters
        (
            FunctionCallArgument
            (
                Whitespace?_ ","_
                Whitespace?_
                FunctionCallArgument{ onFail: fail("Expected function call argument after comma") }
            )*
        )?
        Whitespace?_ ")"_{ onFail: fail("Expected closing parenthesis for function call") }
    )

FunctionCallBlueprintParameters:
    (
        "{"_ Whitespace?_
        (
            FunctionCallBlueprintParameter
            (
                Whitespace?_ ","_
                Whitespace?_
                FunctionCallBlueprintParameter{ onFail: fail("Expected function call blueprint parameter after comma") }
            )*
        )?
        Whitespace?_ "}"_{ onFail: fail("Expected closing brace for function blueprint parameters") }
    )
    ""_

FunctionCallBlueprintParameter:
    Datatype

FunctionCallArgument:
    Expression
    "..."

ExprOpSubscript:
    (
        "["_ Whitespace?_
        Expression{ onFail: fail("Expected subscript index") }
        Whitespace?_ "]"_{ onFail: fail("Expected closing bracket for subscript") }
    )

ExprPrec14:
    "("_ Whitespace?_ Expression Whitespace?_ ")"_{ onFail: fail("Expected closing parenthesis for atom")}
    Identifier
    Literal

\\ ---------------- INDENTATION ----------------

Indentation:
    :IndentationStack.0:

IndentationIncrease:
    ( Indentation Whitespace ){ onMatch: push(_, IndentationStack) }

IndentationDecrease:
    ""_{ onMatch: pop(IndentationStack) }

\\ ---------------- COMMENTS ----------------

Comment:
    Whitespace?_ [ CommentSingleLine CommentMultiLine ]

CommentSingleLine(hidden fuse):
    "\\\\" Newline!*

CommentMultiLine(hidden fuse):
    "\\*" "*\\"!* "*\\"

\\ ---------------- LITERALS ----------------

Literal(hidden):
    LiteralInteger
    LiteralString
    LiteralChar

LiteralInteger(fuse):
    '09'+

LiteralString(fuse):
    (
        "\""_
        StringChar*
        "\""_{ onFail: fail("Expected closing quote for string literal") }
    )

LiteralChar(fuse):
    (
        "'"_
        StringChar
        "'"_{ onFail: fail("Expected closing quote for character literal") }
    )

StringChar(hidden):
    EscapeSequence
    "\""!

\\ ---------------- IDENTIFIERS ----------------

Identifier(fuse):
    [ AlphaChar "_" ] [ AlnumChar "_" ]*

\\ ---------------- MISCELLANEOUS ----------------

NonCodeBlock(hidden):
    (
        [ EmptyLine_ Comment ]
        (
            "\n"_
            [ EmptyLine_ Comment ]
        )*
    )

SymbolReference:
    (
        "."?
        Identifier
        (
            "."_
            Identifier{ onFail: fail("Expected identifier after space access operator") }
        )*
    )

EscapeSequence(fuse):
    (
        "\\"_
        [
            "0" "a" "b" "e" "f" "n" "r" "t" "v" "\\" "'" "\""
            (
                "x" (HexChar HexChar){ onFail: fail("Expected hexadecimal escape sequence after '\\x'") }
            )
        ]{ onFail: fail("Expected escape sequence after '\\'") }
    )

EmptyLine: Whitespace?_ Newline~_

AlphaChar(hidden): [ 'az' 'AZ' ]
AlnumChar(hidden): [ AlphaChar DecChar ]

BinChar(hidden): '01'
OctChar(hidden): '07'
DecChar(hidden): '09'
HexChar(hidden): [ '09' 'af' 'AF' ]

Newline: "\n"
Whitespace(fuse): [ " " "\t" ]+