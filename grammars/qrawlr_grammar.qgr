\\ ---------------- GRAMMAR ----------------

Grammar:
    GrammarLine ( Newline_ GrammarLine )*

GrammarLine(hidden):
    RuleDefinition Whitespace?_ Comment?
    Comment
    Whitespace?_ Newline~_

\\ ---------------- RULE DEFINITION ----------------

RuleDefinition:
    (
        RuleHeader
        Whitespace?_ (Newline_ Whitespace_)?
        RuleBody{ onFail: fail("Expected rule body") }
    )

RuleHeader:
    (
        Identifier
        RuleModifierList?
        Whitespace?_
        ":"_{ onFail: fail("Expected ':'") }
    )

RuleBody:
    (
        RuleOptionDefinition
        Whitespace?_
        (
            Newline_
            Whitespace_
            RuleOptionDefinition
        )*
    )

\\ ---------------- RULE MODIFIERS ----------------

RuleModifierList(hidden):
    (
        "("_
        Whitespace?_
        RuleModifier{ onFail: fail("Expected at least one rule modifier") }
        (
            Whitespace_
            RuleModifier
        )*
        Whitespace?_
        ")"_{ onFail: fail("Expected ')'") }
    )

RuleModifier:
    "hidden"
    "fuse"

\\ ---------------- RULE OPTION ----------------

RuleOptionDefinition:
    (
        FullMatcher
        (
            Whitespace?_
            FullMatcher
        )*
    )

\\ ---------------- MATCHERS ----------------

FullMatcher:
    Matcher MatcherModifiers MatcherActions

Matcher(hidden):
    MatchAnyChar
    MatchAll
    MatchAny
    MatchRange
    MatchExact
    MatchRule
    MatchStack

MatchAnyChar:
    "."_

MatchAll:
    (
        "("_ WoNwoC?
        FullMatcher
        (WoNwoC? FullMatcher)*
        WoNwoC? ")"_{ onFail: fail("Expected ')'") }
    )

MatchAny:
    (
        "["_ WoNwoC?
        FullMatcher
        (WoNwoC? FullMatcher)*
        WoNwoC? "]"_{ onFail: fail("Expected ']'") }
    )

MatchRange:
    (
        "'"_
        MatchRangeChar#2{ onFail: fail("Expected exactly two characters")}
        "'"_{ onFail: fail("Expected '''") }
    )

MatchExact:
    String

MatchRule:
    Identifier

MatchStack:
    (
        ":"_
        Identifier{ onFail: fail("Expected stack name") }
        "."_{ onFail: fail("Expected '.'") }
        Integer{ onFail: fail("Expected stack index") }
        ":"_{ onFail: fail("Expected ':'") }
    )

\\ ---------------- MATCHER MODIFIERS ----------------

MatcherModifiers:
    [ MatcherModifierInvert MatcherModifierQuantifier MatcherModifierLookAhead MatcherModifierOmitMatch MatcherModifierReplaceMatch ]*

MatcherModifierInvert:
    "!"_

MatcherModifierQuantifier:
    [ "?" "*" "+" ]->QuantifierSymbolic
    ( "#"_ Integer "-"_ Integer{ onFail: fail("Expected quantifier range maximum value") } )->QuantifierRange
    ( "#"_ Integer )->QuantifierExact
    ( "#>"_ Integer{ onFail: fail("Expected lower bound value") } )->QuantifierLowerBound
    ( "#<"_ Integer{ onFail: fail("Expected upper bound value") } )->QuantifierUpperBound

MatcherModifierLookAhead:
    "~"_

MatcherModifierOmitMatch:
    "_"_

MatcherModifierReplaceMatch:
    "->"_ [ Identifier String MatchStack ]{ onFail: fail("Expected identifier, string or stack reference") }

\\ ---------------- MATCHER ACTIONS ----------------

MatcherActions:
    "{"_ WoNwoC? ( MatcherTrigger ( WoNwoC? ","_ WoNwoC? MatcherTrigger )* WoNwoC? )? "}"_
    ""_

MatcherTrigger:
    (
        Identifier
        WoNwoC?
        ":"_{ onFail: fail("Expected ':'") }
        WoNwoC?
        MatcherActionList{ onFail: fail("Expected matcher action list") }
    )

MatcherActionList:
    (
        "["_ WoNwoC?
        (
            MatcherAction
            (
                WoNwoC?
                ","_
                WoNwoC?
                MatcherAction{ onFail: fail("Expected matcher action after ','")}
            )*
            WoNwoC?
        )
        "]"_{ onFail: fail("Expected ']'") }
    )
    MatcherAction{ onFail: fail("Expected matcher action") }

MatcherAction:
    Identifier WoNwoC? MatcherActionArgumentList

MatcherActionArgumentList:
    (
        "("_ WoNwoC?
        (
            MatcherActionArgument
            (
                WoNwoC?
                ","_
                WoNwoC?
                MatcherActionArgument{ onFail: fail("Expected matcher action argument after ','")}
            )*
            WoNwoC?
        )
        ")"_{ onFail: fail("Expected ')'") }
    )

MatcherActionArgument(hidden):
    Identifier
    String
    "_"_->MatchedText

\\ ---------------- IDENTIFIER ----------------

Identifier(fuse):
    AlphaChar AlnumChar*

\\ ---------------- COMMENT ----------------

Comment(fuse):
    "\\\\" Newline!*

\\ ---------------- MISCELLANEOUS ----------------

MatchRangeChar:
    "\\"? .

Integer(fuse):
    "0x"_ HexChar+{ onFail: fail("Expected hexadecimal integer literal") } ""_->FormatHex
    "0b"_ BinChar+{ onFail: fail("Expected binary integer literal") } ""_->FormatBin
    "0"_ OctChar+ ""_->FormatOct
    DecChar+ ""_->FormatDec

String(fuse):
    (
        "\""_
        StringChar*
        "\""_{ onFail: fail("Expected '\"'") }
    )

StringChar(hidden):
    EscapeSequence
    "\""!

EscapeSequence(fuse):
    "\\"_ [ "a" "b" "e" "f" "n" "r" "t" "v" "\\" "'" "\"" ]
    "\\"_ "x" (HexChar HexChar){ onFail: fail("Expected hexadecimal escape sequence") }

AlphaChar(hidden):
    'az'
    'AZ'

HexChar(hidden):
    '09'
    'af'
    'AF'

BinChar(hidden):
    '01'

OctChar(hidden):
    '07'

DecChar(hidden):
    '09'

AlnumChar(hidden):
    AlphaChar
    DecChar

Newline(hidden):
    "\x0a"

Whitespace(fuse):
    [ " " "\t" ]+

\\ Whitespace or Newline with optional comment
WoNwoC(hidden):
    [ Whitespace_ Newline_ Comment ]+